const bcrypt = require('bcryptjs');
const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

console.log('=================================');
console.log('  ƒê·ªîI M·∫¨T KH·∫®U ADMIN');
console.log('=================================\n');

rl.question('Nh·∫≠p m·∫≠t kh·∫©u m·ªõi: ', (password) => {
    if (!password || password.length < 6) {
        console.error('‚ùå M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!');
        rl.close();
        return;
    }

    rl.question('X√°c nh·∫≠n m·∫≠t kh·∫©u: ', (confirmPassword) => {
        if (password !== confirmPassword) {
            console.error('‚ùå M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!');
            rl.close();
            return;
        }

        console.log('\n‚è≥ ƒêang t·∫°o hash...');

        const saltRounds = 10;
        bcrypt.hash(password, saltRounds, (err, hash) => {
            if (err) {
                console.error('‚ùå L·ªói khi t·∫°o hash:', err);
                rl.close();
                return;
            }

            console.log('\n‚úÖ Hash ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!');
            console.log('Hash:', hash);

            // Update .env.local file
            const envPath = path.join(__dirname, '..', '.env.local');

            try {
                let envContent = '';

                if (fs.existsSync(envPath)) {
                    envContent = fs.readFileSync(envPath, 'utf8');

                    // Replace existing hash
                    if (envContent.includes('ADMIN_PASSWORD_HASH=')) {
                        envContent = envContent.replace(
                            /ADMIN_PASSWORD_HASH=.*/,
                            `ADMIN_PASSWORD_HASH=${hash}`
                        );
                    } else {
                        // Add hash if not exists
                        envContent += `\nADMIN_PASSWORD_HASH=${hash}\n`;
                    }
                } else {
                    // Create new .env.local
                    envContent = `# Admin Credentials
ADMIN_USERNAME=admin
ADMIN_PASSWORD_HASH=${hash}

# JWT Secret (change this to a random string in production)
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production

# Session Settings
SESSION_MAX_AGE=86400
`;
                }

                fs.writeFileSync(envPath, envContent);

                console.log('\n‚úÖ File .env.local ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!');

                // Update code file automatically
                try {
                    const codePath = path.join(__dirname, '..', 'src', 'app', 'api', 'auth', 'login', 'route.ts');
                    let codeContent = fs.readFileSync(codePath, 'utf8');

                    // Replace hash in code
                    const hashRegex = /const ADMIN_PASSWORD_HASH = '[^']+'; \/\/ .*/;
                    const newHashLine = `const ADMIN_PASSWORD_HASH = '${hash}'; // ${password}`;

                    if (hashRegex.test(codeContent)) {
                        codeContent = codeContent.replace(hashRegex, newHashLine);
                        fs.writeFileSync(codePath, codeContent);
                        console.log('‚úÖ File login/route.ts ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª± ƒë·ªông!');
                    }
                } catch (codeError) {
                    console.log('‚ö†Ô∏è  Kh√¥ng th·ªÉ t·ª± ƒë·ªông c·∫≠p nh·∫≠t code');
                }

                console.log('\nüìù M·∫≠t kh·∫©u m·ªõi c·ªßa b·∫°n:', password);
                console.log('üìù Hash:', hash);
                console.log('\n‚ú® Next.js s·∫Ω t·ª± ƒë·ªông reload, kh√¥ng c·∫ßn restart!');
                console.log('   ƒê·ª£i 2-3 gi√¢y r·ªìi th·ª≠ ƒëƒÉng nh·∫≠p v·ªõi m·∫≠t kh·∫©u m·ªõi\n');

            } catch (error) {
                console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t .env.local:', error);
                console.log('\nüìã Vui l√≤ng copy hash tr√™n v√† paste v√†o file th·ªß c√¥ng');
            }

            rl.close();
        });
    });
});
